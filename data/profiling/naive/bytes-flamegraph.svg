<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="27574"><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (218 samples, 0.79%)</title><rect x="29.7382%" y="149" width="0.7906%" height="15" fill="rgb(227,0,7)" fg:x="8200" fg:w="218"/><text x="29.9882%" y="159.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (218 samples, 0.79%)</title><rect x="29.7382%" y="133" width="0.7906%" height="15" fill="rgb(217,0,24)" fg:x="8200" fg:w="218"/><text x="29.9882%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (580 samples, 2.10%)</title><rect x="29.7382%" y="181" width="2.1034%" height="15" fill="rgb(221,193,54)" fg:x="8200" fg:w="580"/><text x="29.9882%" y="191.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (580 samples, 2.10%)</title><rect x="29.7382%" y="165" width="2.1034%" height="15" fill="rgb(248,212,6)" fg:x="8200" fg:w="580"/><text x="29.9882%" y="175.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (362 samples, 1.31%)</title><rect x="30.5288%" y="149" width="1.3128%" height="15" fill="rgb(208,68,35)" fg:x="8418" fg:w="362"/><text x="30.7788%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (65 samples, 0.24%)</title><rect x="31.8416%" y="181" width="0.2357%" height="15" fill="rgb(232,128,0)" fg:x="8780" fg:w="65"/><text x="32.0916%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (411 samples, 1.49%)</title><rect x="32.0773%" y="181" width="1.4905%" height="15" fill="rgb(207,160,47)" fg:x="8845" fg:w="411"/><text x="32.3273%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (34 samples, 0.12%)</title><rect x="33.5679%" y="165" width="0.1233%" height="15" fill="rgb(228,23,34)" fg:x="9256" fg:w="34"/><text x="33.8179%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,634 samples, 13.18%)</title><rect x="24.0480%" y="245" width="13.1791%" height="15" fill="rgb(218,30,26)" fg:x="6631" fg:w="3634"/><text x="24.2980%" y="255.50">&lt;std::collections::h..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,634 samples, 13.18%)</title><rect x="24.0480%" y="229" width="13.1791%" height="15" fill="rgb(220,122,19)" fg:x="6631" fg:w="3634"/><text x="24.2980%" y="239.50">&lt;hashbrown::map::Ite..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,634 samples, 13.18%)</title><rect x="24.0480%" y="213" width="13.1791%" height="15" fill="rgb(250,228,42)" fg:x="6631" fg:w="3634"/><text x="24.2980%" y="223.50">&lt;hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3,419 samples, 12.40%)</title><rect x="24.8277%" y="197" width="12.3994%" height="15" fill="rgb(240,193,28)" fg:x="6846" fg:w="3419"/><text x="25.0777%" y="207.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (1,009 samples, 3.66%)</title><rect x="33.5679%" y="181" width="3.6592%" height="15" fill="rgb(216,20,37)" fg:x="9256" fg:w="1009"/><text x="33.8179%" y="191.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (975 samples, 3.54%)</title><rect x="33.6912%" y="165" width="3.5359%" height="15" fill="rgb(206,188,39)" fg:x="9290" fg:w="975"/><text x="33.9412%" y="175.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (975 samples, 3.54%)</title><rect x="33.6912%" y="149" width="3.5359%" height="15" fill="rgb(217,207,13)" fg:x="9290" fg:w="975"/><text x="33.9412%" y="159.50">cor..</text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="37.2271%" y="245" width="0.0109%" height="15" fill="rgb(231,73,38)" fg:x="10265" fg:w="3"/><text x="37.4771%" y="255.50"></text></g><g><title>__rdl_alloc (489 samples, 1.77%)</title><rect x="38.6959%" y="53" width="1.7734%" height="15" fill="rgb(225,20,46)" fg:x="10670" fg:w="489"/><text x="38.9459%" y="63.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (188 samples, 0.68%)</title><rect x="39.7875%" y="37" width="0.6818%" height="15" fill="rgb(210,31,41)" fg:x="10971" fg:w="188"/><text x="40.0375%" y="47.50"></text></g><g><title>__rust_alloc (320 samples, 1.16%)</title><rect x="40.4693%" y="53" width="1.1605%" height="15" fill="rgb(221,200,47)" fg:x="11159" fg:w="320"/><text x="40.7193%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,354 samples, 12.16%)</title><rect x="37.2380%" y="149" width="12.1636%" height="15" fill="rgb(226,26,5)" fg:x="10268" fg:w="3354"/><text x="37.4880%" y="159.50">alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,354 samples, 12.16%)</title><rect x="37.2380%" y="133" width="12.1636%" height="15" fill="rgb(249,33,26)" fg:x="10268" fg:w="3354"/><text x="37.4880%" y="143.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,354 samples, 12.16%)</title><rect x="37.2380%" y="117" width="12.1636%" height="15" fill="rgb(235,183,28)" fg:x="10268" fg:w="3354"/><text x="37.4880%" y="127.50">alloc::raw_vec::Ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,308 samples, 12.00%)</title><rect x="37.4048%" y="101" width="11.9968%" height="15" fill="rgb(221,5,38)" fg:x="10314" fg:w="3308"/><text x="37.6548%" y="111.50">&lt;alloc::alloc::Glo..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,308 samples, 12.00%)</title><rect x="37.4048%" y="85" width="11.9968%" height="15" fill="rgb(247,18,42)" fg:x="10314" fg:w="3308"/><text x="37.6548%" y="95.50">alloc::alloc::Glob..</text></g><g><title>alloc::alloc::alloc (3,308 samples, 12.00%)</title><rect x="37.4048%" y="69" width="11.9968%" height="15" fill="rgb(241,131,45)" fg:x="10314" fg:w="3308"/><text x="37.6548%" y="79.50">alloc::alloc::alloc</text></g><g><title>malloc (2,143 samples, 7.77%)</title><rect x="41.6298%" y="53" width="7.7718%" height="15" fill="rgb(249,31,29)" fg:x="11479" fg:w="2143"/><text x="41.8798%" y="63.50">malloc</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4,624 samples, 16.77%)</title><rect x="37.2380%" y="245" width="16.7694%" height="15" fill="rgb(225,111,53)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="255.50">alloc::str::&lt;impl alloc::b..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4,624 samples, 16.77%)</title><rect x="37.2380%" y="229" width="16.7694%" height="15" fill="rgb(238,160,17)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="239.50">alloc::slice::&lt;impl alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,624 samples, 16.77%)</title><rect x="37.2380%" y="213" width="16.7694%" height="15" fill="rgb(214,148,48)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="223.50">alloc::slice::&lt;impl [T]&gt;::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,624 samples, 16.77%)</title><rect x="37.2380%" y="197" width="16.7694%" height="15" fill="rgb(232,36,49)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="207.50">alloc::slice::&lt;impl [T]&gt;::..</text></g><g><title>alloc::slice::hack::to_vec (4,624 samples, 16.77%)</title><rect x="37.2380%" y="181" width="16.7694%" height="15" fill="rgb(209,103,24)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="191.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,624 samples, 16.77%)</title><rect x="37.2380%" y="165" width="16.7694%" height="15" fill="rgb(229,88,8)" fg:x="10268" fg:w="4624"/><text x="37.4880%" y="175.50">&lt;T as alloc::slice::hack::..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,270 samples, 4.61%)</title><rect x="49.4016%" y="149" width="4.6058%" height="15" fill="rgb(213,181,19)" fg:x="13622" fg:w="1270"/><text x="49.6516%" y="159.50">core:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,270 samples, 4.61%)</title><rect x="49.4016%" y="133" width="4.6058%" height="15" fill="rgb(254,191,54)" fg:x="13622" fg:w="1270"/><text x="49.6516%" y="143.50">core:..</text></g><g><title>[libc.so.6] (1,027 samples, 3.72%)</title><rect x="50.2829%" y="117" width="3.7245%" height="15" fill="rgb(241,83,37)" fg:x="13865" fg:w="1027"/><text x="50.5329%" y="127.50">[lib..</text></g><g><title>__rdl_dealloc (267 samples, 0.97%)</title><rect x="56.2378%" y="117" width="0.9683%" height="15" fill="rgb(233,36,39)" fg:x="15507" fg:w="267"/><text x="56.4878%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (267 samples, 0.97%)</title><rect x="56.2378%" y="101" width="0.9683%" height="15" fill="rgb(226,3,54)" fg:x="15507" fg:w="267"/><text x="56.4878%" y="111.50"></text></g><g><title>__rust_dealloc (527 samples, 1.91%)</title><rect x="57.2061%" y="117" width="1.9112%" height="15" fill="rgb(245,192,40)" fg:x="15774" fg:w="527"/><text x="57.4561%" y="127.50">_..</text></g><g><title>cfree (4,837 samples, 17.54%)</title><rect x="59.1173%" y="117" width="17.5419%" height="15" fill="rgb(238,167,29)" fg:x="16301" fg:w="4837"/><text x="59.3673%" y="127.50">cfree</text></g><g><title>[libc.so.6] (3,409 samples, 12.36%)</title><rect x="64.2961%" y="101" width="12.3631%" height="15" fill="rgb(232,182,51)" fg:x="17729" fg:w="3409"/><text x="64.5461%" y="111.50">[libc.so.6]</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,994 samples, 21.74%)</title><rect x="54.9249%" y="149" width="21.7379%" height="15" fill="rgb(231,60,39)" fg:x="15145" fg:w="5994"/><text x="55.1749%" y="159.50">&lt;alloc::alloc::Global as core::all..</text></g><g><title>alloc::alloc::dealloc (5,994 samples, 21.74%)</title><rect x="54.9249%" y="133" width="21.7379%" height="15" fill="rgb(208,69,12)" fg:x="15145" fg:w="5994"/><text x="55.1749%" y="143.50">alloc::alloc::dealloc</text></g><g><title>core::ptr::drop_in_place&lt;wordle_solver::guesser::Guess&gt; (6,264 samples, 22.72%)</title><rect x="54.0074%" y="245" width="22.7171%" height="15" fill="rgb(235,93,37)" fg:x="14892" fg:w="6264"/><text x="54.2574%" y="255.50">core::ptr::drop_in_place&lt;wordle_solv..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (6,264 samples, 22.72%)</title><rect x="54.0074%" y="229" width="22.7171%" height="15" fill="rgb(213,116,39)" fg:x="14892" fg:w="6264"/><text x="54.2574%" y="239.50">core::ptr::drop_in_place&lt;alloc::borr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,188 samples, 22.44%)</title><rect x="54.2830%" y="213" width="22.4414%" height="15" fill="rgb(222,207,29)" fg:x="14968" fg:w="6188"/><text x="54.5330%" y="223.50">core::ptr::drop_in_place&lt;alloc::stri..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,188 samples, 22.44%)</title><rect x="54.2830%" y="197" width="22.4414%" height="15" fill="rgb(206,96,30)" fg:x="14968" fg:w="6188"/><text x="54.5330%" y="207.50">core::ptr::drop_in_place&lt;alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,188 samples, 22.44%)</title><rect x="54.2830%" y="181" width="22.4414%" height="15" fill="rgb(218,138,4)" fg:x="14968" fg:w="6188"/><text x="54.5330%" y="191.50">core::ptr::drop_in_place&lt;alloc::raw_..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,188 samples, 22.44%)</title><rect x="54.2830%" y="165" width="22.4414%" height="15" fill="rgb(250,191,14)" fg:x="14968" fg:w="6188"/><text x="54.5330%" y="175.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (17 samples, 0.06%)</title><rect x="76.6628%" y="149" width="0.0617%" height="15" fill="rgb(239,60,40)" fg:x="21139" fg:w="17"/><text x="76.9128%" y="159.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log2 (10 samples, 0.04%)</title><rect x="76.7245%" y="245" width="0.0363%" height="15" fill="rgb(206,27,48)" fg:x="21156" fg:w="10"/><text x="76.9745%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log_wrapper (10 samples, 0.04%)</title><rect x="76.7245%" y="229" width="0.0363%" height="15" fill="rgb(225,35,8)" fg:x="21156" fg:w="10"/><text x="76.9745%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log2::{{closure}} (10 samples, 0.04%)</title><rect x="76.7245%" y="213" width="0.0363%" height="15" fill="rgb(250,213,24)" fg:x="21156" fg:w="10"/><text x="76.9745%" y="223.50"></text></g><g><title>log2 (10 samples, 0.04%)</title><rect x="76.7245%" y="197" width="0.0363%" height="15" fill="rgb(247,123,22)" fg:x="21156" fg:w="10"/><text x="76.9745%" y="207.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.11%)</title><rect x="89.3160%" y="229" width="0.1088%" height="15" fill="rgb(231,138,38)" fg:x="24628" fg:w="30"/><text x="89.5660%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (583 samples, 2.11%)</title><rect x="89.4248%" y="229" width="2.1143%" height="15" fill="rgb(231,145,46)" fg:x="24658" fg:w="583"/><text x="89.6748%" y="239.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (261 samples, 0.95%)</title><rect x="90.5926%" y="213" width="0.9465%" height="15" fill="rgb(251,118,11)" fg:x="24980" fg:w="261"/><text x="90.8426%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (261 samples, 0.95%)</title><rect x="90.5926%" y="197" width="0.9465%" height="15" fill="rgb(217,147,25)" fg:x="24980" fg:w="261"/><text x="90.8426%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (77 samples, 0.28%)</title><rect x="91.2599%" y="181" width="0.2792%" height="15" fill="rgb(247,81,37)" fg:x="25164" fg:w="77"/><text x="91.5099%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (77 samples, 0.28%)</title><rect x="91.2599%" y="165" width="0.2792%" height="15" fill="rgb(209,12,38)" fg:x="25164" fg:w="77"/><text x="91.5099%" y="175.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (77 samples, 0.28%)</title><rect x="91.2599%" y="149" width="0.2792%" height="15" fill="rgb(227,1,9)" fg:x="25164" fg:w="77"/><text x="91.5099%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (77 samples, 0.28%)</title><rect x="91.2599%" y="133" width="0.2792%" height="15" fill="rgb(248,47,43)" fg:x="25164" fg:w="77"/><text x="91.5099%" y="143.50"></text></g><g><title>core::iter::adapters::zip::zip (12 samples, 0.04%)</title><rect x="91.5391%" y="229" width="0.0435%" height="15" fill="rgb(221,10,30)" fg:x="25241" fg:w="12"/><text x="91.7891%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (12 samples, 0.04%)</title><rect x="91.5391%" y="213" width="0.0435%" height="15" fill="rgb(210,229,1)" fg:x="25241" fg:w="12"/><text x="91.7891%" y="223.50"></text></g><g><title>core::cmp::min (12 samples, 0.04%)</title><rect x="91.5391%" y="197" width="0.0435%" height="15" fill="rgb(222,148,37)" fg:x="25241" fg:w="12"/><text x="91.7891%" y="207.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.04%)</title><rect x="91.5391%" y="181" width="0.0435%" height="15" fill="rgb(234,67,33)" fg:x="25241" fg:w="12"/><text x="91.7891%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1,792 samples, 6.50%)</title><rect x="91.5827%" y="181" width="6.4989%" height="15" fill="rgb(247,98,35)" fg:x="25253" fg:w="1792"/><text x="91.8327%" y="191.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (1,790 samples, 6.49%)</title><rect x="91.5899%" y="165" width="6.4916%" height="15" fill="rgb(247,138,52)" fg:x="25255" fg:w="1790"/><text x="91.8399%" y="175.50">core::ite..</text></g><g><title>wordle_solver::guesser::Guess::matches::{{closure}} (1,790 samples, 6.49%)</title><rect x="91.5899%" y="149" width="6.4916%" height="15" fill="rgb(213,79,30)" fg:x="25255" fg:w="1790"/><text x="91.8399%" y="159.50">wordle_so..</text></g><g><title>core::iter::traits::iterator::Iterator::any (2,046 samples, 7.42%)</title><rect x="91.5827%" y="229" width="7.4200%" height="15" fill="rgb(246,177,23)" fg:x="25253" fg:w="2046"/><text x="91.8327%" y="239.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,046 samples, 7.42%)</title><rect x="91.5827%" y="213" width="7.4200%" height="15" fill="rgb(230,62,27)" fg:x="25253" fg:w="2046"/><text x="91.8327%" y="223.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,046 samples, 7.42%)</title><rect x="91.5827%" y="197" width="7.4200%" height="15" fill="rgb(216,154,8)" fg:x="25253" fg:w="2046"/><text x="91.8327%" y="207.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (254 samples, 0.92%)</title><rect x="98.0815%" y="181" width="0.9212%" height="15" fill="rgb(244,35,45)" fg:x="27045" fg:w="254"/><text x="98.3315%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (254 samples, 0.92%)</title><rect x="98.0815%" y="165" width="0.9212%" height="15" fill="rgb(251,115,12)" fg:x="27045" fg:w="254"/><text x="98.3315%" y="175.50"></text></g><g><title>all (27,574 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="815.50"></text></g><g><title>wordle-solver (27,574 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="799.50">wordle-solver</text></g><g><title>_start (27,574 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="783.50">_start</text></g><g><title>__libc_start_main (27,574 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (27,574 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="751.50">[libc.so.6]</text></g><g><title>main (27,574 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (27,574 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (27,574 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,574 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,574 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (27,574 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="655.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (27,574 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,574 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,574 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (27,574 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (27,574 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="575.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27,574 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (27,574 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>wordle_solver::main (27,574 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="527.50">wordle_solver::main</text></g><g><title>wordle_solver::play (27,574 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="511.50">wordle_solver::play</text></g><g><title>wordle_solver::Wordle::play (27,574 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="495.50">wordle_solver::Wordle::play</text></g><g><title>&lt;wordle_solver::algorithms::naive::NaiveGuesser as wordle_solver::guesser::Guesser&gt;::guess (27,574 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="479.50">&lt;wordle_solver::algorithms::naive::NaiveGuesser as wordle_solver::guesser::Guesser&gt;::guess</text></g><g><title>wordle_solver::algorithms::naive::NaiveGuesser::compute_score (27,574 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="463.50">wordle_solver::algorithms::naive::NaiveGuesser::compute_score</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,574 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="447.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;itertools::cons_tuples_impl::ConsTuples&lt;Iter,((I,J,K,L),X)&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,574 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="431.50">&lt;itertools::cons_tuples_impl::ConsTuples&lt;Iter,((I,J,K,L),X)&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,574 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="27574"/><text x="0.2500%" y="415.50">&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,571 samples, 99.99%)</title><rect x="0.0109%" y="389" width="99.9891%" height="15" fill="rgb(216,164,2)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="399.50">&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,571 samples, 99.99%)</title><rect x="0.0109%" y="373" width="99.9891%" height="15" fill="rgb(220,129,5)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="383.50">&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27,571 samples, 99.99%)</title><rect x="0.0109%" y="357" width="99.9891%" height="15" fill="rgb(242,17,10)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="367.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (27,571 samples, 99.99%)</title><rect x="0.0109%" y="341" width="99.9891%" height="15" fill="rgb(242,107,0)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="351.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}}</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (27,571 samples, 99.99%)</title><rect x="0.0109%" y="325" width="99.9891%" height="15" fill="rgb(251,28,31)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="335.50">&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}}</text></g><g><title>&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (27,571 samples, 99.99%)</title><rect x="0.0109%" y="309" width="99.9891%" height="15" fill="rgb(233,223,10)" fg:x="3" fg:w="27571"/><text x="0.2609%" y="319.50">&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}}</text></g><g><title>&lt;itertools::cons_tuples_impl::ConsTuples&lt;Iter,((I,J,K,L),X)&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (27,570 samples, 99.99%)</title><rect x="0.0145%" y="293" width="99.9855%" height="15" fill="rgb(215,21,27)" fg:x="4" fg:w="27570"/><text x="0.2645%" y="303.50">&lt;itertools::cons_tuples_impl::ConsTuples&lt;Iter,((I,J,K,L),X)&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (27,570 samples, 99.99%)</title><rect x="0.0145%" y="277" width="99.9855%" height="15" fill="rgb(232,23,21)" fg:x="4" fg:w="27570"/><text x="0.2645%" y="287.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>wordle_solver::algorithms::naive::NaiveGuesser::compute_score::{{closure}} (27,570 samples, 99.99%)</title><rect x="0.0145%" y="261" width="99.9855%" height="15" fill="rgb(244,5,23)" fg:x="4" fg:w="27570"/><text x="0.2645%" y="271.50">wordle_solver::algorithms::naive::NaiveGuesser::compute_score::{{closure}}</text></g><g><title>wordle_solver::guesser::Guess::matches (6,408 samples, 23.24%)</title><rect x="76.7607%" y="245" width="23.2393%" height="15" fill="rgb(226,81,46)" fg:x="21166" fg:w="6408"/><text x="77.0107%" y="255.50">wordle_solver::guesser::Guess::matches</text></g><g><title>core::iter::traits::iterator::Iterator::zip (275 samples, 1.00%)</title><rect x="99.0027%" y="229" width="0.9973%" height="15" fill="rgb(247,70,30)" fg:x="27299" fg:w="275"/><text x="99.2527%" y="239.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (275 samples, 1.00%)</title><rect x="99.0027%" y="213" width="0.9973%" height="15" fill="rgb(212,68,19)" fg:x="27299" fg:w="275"/><text x="99.2527%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (275 samples, 1.00%)</title><rect x="99.0027%" y="197" width="0.9973%" height="15" fill="rgb(240,187,13)" fg:x="27299" fg:w="275"/><text x="99.2527%" y="207.50"></text></g><g><title>core::cmp::min (275 samples, 1.00%)</title><rect x="99.0027%" y="181" width="0.9973%" height="15" fill="rgb(223,113,26)" fg:x="27299" fg:w="275"/><text x="99.2527%" y="191.50"></text></g><g><title>core::cmp::Ord::min (275 samples, 1.00%)</title><rect x="99.0027%" y="165" width="0.9973%" height="15" fill="rgb(206,192,2)" fg:x="27299" fg:w="275"/><text x="99.2527%" y="175.50"></text></g></svg></svg>